
  0%|                                                                                                        | 0/500 [00:00<?, ?it/s]You're using a LlamaTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
> /data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/trl/trainer/utils.py(109)torch_call()
    108                 import ipdb; ipdb.set_trace()
--> 109                 if response_token_ids_start_idx is None:
    110                     raise RuntimeError(
*** TypeError: PreTrainedTokenizerBase.encode() missing 1 required positional argument: 'text'
{'input_ids': tensor([[    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  1348,   372,   471,   263,  2217,  4688,   760,
           310,   278, 11801,    13,  2277, 29937,  6466,  2177,   481,  1092,
           559, 29901,   474,  4658,   372,   471,  4688,   297,   278, 11801,
             2,     2,     2,     2,     2,     2],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   896, 11097,   825, 29879,  1900,   363,  1009,  3942,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   896,
         11097,   825, 29879,  1900,   363,   963,   322,  1009,  3942,     2,
             2,     2,     2,     2,     2,     2],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  7424,   304,   367,   263, 12176,  1108,   411,
           534,  2707, 18563,   773,  5883,  3174,    13,  2277, 29937,  6466,
          2177,   481,  1092,   559, 29901,   967,  7424,   304,   367,   263,
          4802,  1108,   411,   534,  2707, 18563],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   297, 14721,   727,   263,  3287,   310, 10609,   373,
         20346,  3081,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   727,   338,   263,  3287,   310, 26307,   373, 20346,  3081,
             2,     2,     2,     2,     2,     2],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  8369,   278,   715,  6288,   505,  2656,   310,
           285, 11932,  3448,   278, 27274,  8740, 29879,    13,  2277, 29937,
          6466,  2177,   481,  1092,   559, 29901,   278,   715,  6288,  8740,
         29879,   505,   285, 11932,   263,  2586],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   278, 15116, 19016,   750,   278, 18788,    13,  2277,
         29937,  6466,  2177,   481,  1092,   559, 29901,   278, 18788,   892,
           297,   278,  6567,   310, 15116, 19016,     2,     2,     2,     2,
             2,     2,     2,     2,     2,     2],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,   671,   278, 11955,   393,   896,  2649,   592,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   474,
           437,  5491,   671,   278, 11955,   896,  2649,   592,   304,     2,
             2,     2,     2,     2,     2,     2],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  3614,   599,  2462,   304,   679,   372,   715,
           398,  2580,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   372,   471,   385,   599,  2462,  4982,   304,   679,   372,
           715,   398,  2580,     2,     2,     2]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]]), 'labels': tensor([[    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  1348,   372,   471,   263,  2217,  4688,   760,
           310,   278, 11801,    13,  2277, 29937,  6466,  2177,   481,  1092,
           559, 29901,   474,  4658,   372,   471,  4688,   297,   278, 11801,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   896, 11097,   825, 29879,  1900,   363,  1009,  3942,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   896,
         11097,   825, 29879,  1900,   363,   963,   322,  1009,  3942,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  7424,   304,   367,   263, 12176,  1108,   411,
           534,  2707, 18563,   773,  5883,  3174,    13,  2277, 29937,  6466,
          2177,   481,  1092,   559, 29901,   967,  7424,   304,   367,   263,
          4802,  1108,   411,   534,  2707, 18563],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   297, 14721,   727,   263,  3287,   310, 10609,   373,
         20346,  3081,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   727,   338,   263,  3287,   310, 26307,   373, 20346,  3081,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  8369,   278,   715,  6288,   505,  2656,   310,
           285, 11932,  3448,   278, 27274,  8740, 29879,    13,  2277, 29937,
          6466,  2177,   481,  1092,   559, 29901,   278,   715,  6288,  8740,
         29879,   505,   285, 11932,   263,  2586],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   278, 15116, 19016,   750,   278, 18788,    13,  2277,
         29937,  6466,  2177,   481,  1092,   559, 29901,   278, 18788,   892,
           297,   278,  6567,   310, 15116, 19016,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,   671,   278, 11955,   393,   896,  2649,   592,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   474,
           437,  5491,   671,   278, 11955,   896,  2649,   592,   304,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  3614,   599,  2462,   304,   679,   372,   715,
           398,  2580,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   372,   471,   385,   599,  2462,  4982,   304,   679,   372,
           715,   398,  2580,  -100,  -100,  -100]])}
tensor([[    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  1348,   372,   471,   263,  2217,  4688,   760,
           310,   278, 11801,    13,  2277, 29937,  6466,  2177,   481,  1092,
           559, 29901,   474,  4658,   372,   471,  4688,   297,   278, 11801,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   896, 11097,   825, 29879,  1900,   363,  1009,  3942,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   896,
         11097,   825, 29879,  1900,   363,   963,   322,  1009,  3942,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  7424,   304,   367,   263, 12176,  1108,   411,
           534,  2707, 18563,   773,  5883,  3174,    13,  2277, 29937,  6466,
          2177,   481,  1092,   559, 29901,   967,  7424,   304,   367,   263,
          4802,  1108,   411,   534,  2707, 18563],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   297, 14721,   727,   263,  3287,   310, 10609,   373,
         20346,  3081,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   727,   338,   263,  3287,   310, 26307,   373, 20346,  3081,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,  8369,   278,   715,  6288,   505,  2656,   310,
           285, 11932,  3448,   278, 27274,  8740, 29879,    13,  2277, 29937,
          6466,  2177,   481,  1092,   559, 29901,   278,   715,  6288,  8740,
         29879,   505,   285, 11932,   263,  2586],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   278, 15116, 19016,   750,   278, 18788,    13,  2277,
         29937,  6466,  2177,   481,  1092,   559, 29901,   278, 18788,   892,
           297,   278,  6567,   310, 15116, 19016,  -100,  -100,  -100,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   474,   671,   278, 11955,   393,   896,  2649,   592,
            13,  2277, 29937,  6466,  2177,   481,  1092,   559, 29901,   474,
           437,  5491,   671,   278, 11955,   896,  2649,   592,   304,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
         18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
         29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
          4290, 29901,   372,  3614,   599,  2462,   304,   679,   372,   715,
           398,  2580,    13,  2277, 29937,  6466,  2177,   481,  1092,   559,
         29901,   372,   471,   385,   599,  2462,  4982,   304,   679,   372,
           715,   398,  2580,  -100,  -100,  -100]])
tensor([    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
        18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
        29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
         4290, 29901,   474,  1348,   372,   471,   263,  2217,  4688,   760,
          310,   278, 11801,    13,  2277, 29937,  6466,  2177,   481,  1092,
          559, 29901,   474,  4658,   372,   471,  4688,   297,   278, 11801,
         -100,  -100,  -100,  -100,  -100,  -100])
*** OverflowError: out of range integral type conversion attempted
'<s> For the given input'
'<s> For the given input text, generate an ac'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-1'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it was a little early part'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it was a little early part of the summer\n##'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it was a little early part of the summer\n###OutputParaphr'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it was a little early part of the summer\n###OutputParaphrase: i believe it'
'<s> For the given input text, generate an acoustically better intelligible paraphrase with 10-12 words\n###Input: i think it was a little early part of the summer\n###OutputParaphrase: i believe it was early in the summer'
*** OverflowError: out of range integral type conversion attempted
tensor([-100, -100, -100, -100, -100])
tensor([    1,  1152,   278,  2183,  1881,  1426, 29892,  5706,   385,  1274,
        18291,  1711,  2253, 13052,  1821,   610,   481,  1092,   559,   411,
        29871, 29896, 29900, 29899, 29896, 29906,  3838,    13,  2277, 29937,
         4290, 29901,   474,  1348,   372,   471,   263,  2217,  4688,   760,
          310,   278, 11801,    13,  2277, 29937,  6466,  2177,   481,  1092,
          559, 29901,   474,  4658,   372,   471,  4688,   297,   278, 11801])
[1, 29871, 13, 2277, 29937, 6466, 2177, 481, 1092, 559, 29901, 29871]
Traceback (most recent call last):
  File "/nethome/achingacham/PycharmProjects/LLaMA/scripts/sft_llama.py", line 422, in <module>
    #dataset_text_field="text", # do not use this with data collator
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/transformers/trainer.py", line 1539, in train
    return inner_training_loop(
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/transformers/trainer.py", line 1787, in _inner_training_loop
    for step, inputs in enumerate(epoch_iterator):
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/accelerate/data_loader.py", line 384, in __iter__
    current_batch = next(dataloader_iter)
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 677, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 54, in fetch
    return self.collate_fn(data)
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/transformers/data/data_collator.py", line 45, in __call__
    return self.torch_call(features)
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/trl/trainer/utils.py", line 109, in torch_call
    if response_token_ids_start_idx is None:
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/site-packages/trl/trainer/utils.py", line 109, in torch_call
    if response_token_ids_start_idx is None:
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/data/users/achingacham/anaconda3/envs/llama/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
If you suspect this is an IPython 8.14.0 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org
You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.
Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True